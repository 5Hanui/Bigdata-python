# 단일 데이터 (변수) > 문자형 = 문자열
# 문자열 표현 방법
# 데이터가 한줄일 경우 : '..', "..."
# '''...''', """ ... """
# => 여러주, 문자열 데이터가 구조를 유지해야 할 때,
# => 여러줄 주석용
####################################################
a = 'hello'
print(a)
a = 'hi'
print(a)
# 미리 예약되어 있는 내장함수, 예약어 등은 절대로
# 변수명으로 사용하면 안된다!
print(type(a))
# 수치=>문자로
b = str(10)
print(b, type(b))
# str은 문자열을 생성하는 예약된 함수이므로
# 변수로 쓰는 순간 예기치 못한 오류가 발생될 수 있다.
# str = 'multi' -> strName은 괜찮다.
# print(str)
# b = str(10)
# print(b,type(b))
####################################################
# 혼용으로 사용
a = 'this is a "python" multi'
print(a)
# 난 모든 표현을 '로 하고 싶다 => 이스케이프문자활용
a = "this is a 'python' multi"
print(a)
a = 'this is a \'python\' multi'
print(a)
###################################################
# 여러줄
a = '''
ㄴㅇㄹㄴㅇㄹ
ㄴㅇㄴㅇㄹ
ㅇㄴㅇ
ㄴㅇㄴㅇ
ㄴㅇ
'''
print(a)
###################################################
# 문자열 더하기 ( 이어 붙이기 )
a = 'abc'
b = '1234'
print(a+b)
# 개수가 적거나 간단하게 문자열을 합칠 경우 사용
# 복잡해지거나 삽입해야 하거나 하면 => 포맷팅 방법
##################################################
# 문자열 반복
print('*'*30)
##################################################
# 인덱싱 : indexing
a = '0123456789'
# 문자열의 인덱싱 :  문자열에서 특정 문자를 획득하는 방식
# 값을 하나 획득하는 방식,
# 문법 => 변수명[인덱스]
# 인덱스 : 순서를 의미하고, 순서가 존재하는
#           연속데이터 타입인 경우에만 존재
# 순서는 0, 1, 2, ... : 정방향
#     -1, -2, -3, ...: 역방향
# 4를 출력하시오
print(a[4])
# 9를 출력하시오
# 인덱싱은 데이터가 가까운 쪽에서 방향을 설정한다.
print(a[9], a[-1])
##################################################
# 슬라이싱: 범위값에 해당하는 데이터를 획득
# 자른다 => 원본과 차원이 일치
# 문법: 변수명[시작인덱스:끝인덱스:step(1이 기본값)]
a = '0123456789'
# 234를 출력하시오
# 시작인덱스<= x <끝인덱스
print(a[2:5])
#678을 역방향으로 슬라이싱 하시오
print(a[-4:-1])
# 012를 출력하시오
# 앞부터, 뒤부터 라고 하면 경계값을
# 생략 가능하다.
print(a[0:3], a[:3])
print('원본a 카피와 동일=', a[:])
##################################################
# 포맷팅
# 문자열 내부에 데이터를 넣어서 문자열을 만들 때 사용
# 전처리계열, 데이터 정제하는 단계 많이 사용
a = 1
b = 2
# 더하기 식을 결과까지 포항하여 표현하시오
# 1 + 2 = 3
print(str(a)+" + "+str(b) + " = " + str(a+b))
# 문자열 형식을 준비하고 데이터가 들어갈 자리
# %타입형태로 %d, %f, %s등으로 배치하고
print("%d + %d = %d" % (a, b, a+b))
# 1 / 2 = 0.5
print("%d / %d = %f" % (a, b, a/b))
# 입력데이터 타입을 정확하게 모르면, 의도하지 않은
# 결과를 얻을 수 있다. => 간단하게 해결할 방법
# %s로 받으면 타입을 몰라도 그 의도대로 표시됨
print("%s / %s = %s" % (a, b, a/b))
#################################################
# 다른 방식의 포맷팅 -> 문자열 내의 함수를 사용
# format 함수의 인자 순서대로 채운다
print("{} / {} = {}".format(a, b, a/b))
# 인덱스로 포함될 위치를 자유롭게 결정한다.
print("{0} / {1} = {2}".format(a, b, a/b))
print("{2} / {0} = {1}".format(a, b, a/b))
print("{1} / {2} = {0}".format(a, b, a/b))
# res 파라미터명 부여할 경우
# 포맷팅의 각 자리에 대한 정확한 설명을 할 수 있다.
print("{0} / {1} = {res}".format(a, b, res=a/b))
################################################
# 문자열 지원함수(유니버스 함수)
# ''.지원함수()
a = 'helloworld'
# 특정 문자열의 개수 : o이라는 문자의 개수
print(a.count('o'))
print(a.count('a'))
# 특정문자의 인덱스 반환
print(a.index('e'))
# 없는 문자는 에러발생
# print(a.index('a'))
print(a.find('e'))
print(a.find('a'), '존재하지 않으면 -1')
# 위의 함수들은 문자열 내에 특정 문자가 존재하는지
# 체크할 수 있는 함수들이다.
################################################
# 조인, 분해
txt = 'http://m.naver.com/img/face.png'
txt2 = 'helloworld'
# 분해 -> 특정 문자를 중심으로 문자열을 쪼갠다.
#      -> 쪼갠 후 리스트에 담아서 반환 구조
print(txt.split('/'))
# 공백 기준으로 분해 (함수 호출시 인자가 없다)
print(txt2.split())
#조인
txt3 = 'helloworld'
print(','.join(txt3))
print(','.join(txt3).split(','))
###############################################
# 대소문자 처리
a = 'aababaADFA!@#11133가나다'
print(a)
# 주어진 문자를 모두 대문자
print(a.upper())
# 주어진 문자를 모두 소문자
print(a.lower())
# 입력된 데이터를 처리시 판단 기준에 따라 대/소문자처리
# 가 필요한 경우 사용
###############################################
# 공백 처리
a = '       sdfsdfsdfsdf  adfsdfsdf'
# 왼쪽 공백 제거
print('[%s]' % a.lstrip())
# 오른쪽 공백 제거
print('[%s]' % a.rstrip())
# 양쪽 공백 제거
print('[%s]' % a.strip())
# 내부 공백 제거 => 정규식으로만 해결 가능
#################################################
# 포맷팅 자리수 표현: 데이터의 크기를 맞출 때
print('[%s]' % '12345')
# 지금부터 표현하는 데이터는 20칸을 가진다.
print('[%20s]' % '12345')
print('[%-20s]' % '12345')  # 앞에서부터 채우기
print('[%20s]' % 3.1456666682829)
# 소수점은 2자리만 표시
# 정수부 17자리, 점(1자리), 소수부 2자리
# 소수부는 반올림되는 증상이 있다.
print('[%20.2f]' % 3.1456666682829)
###############################################
# 치환식, 포맷팅+자리수 합친 케이스
a = '123{0}456'.format('C')
print(a)
# 자리수 20
print('123{0:<20}456'.format('C'))
print('123{0:>20}456'.format('C'))
print('123{0:^20}456'.format('C'))
print('123{0:*^20}456'.format('C'))
